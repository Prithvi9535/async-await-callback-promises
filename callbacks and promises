const AWS = require('aws-sdk');
// var lambda = new AWS.Lambda();
var docClient = new AWS.DynamoDB.DocumentClient();
// require('./patch.js');


function queryDynamo(params, callback, callbackFn) {
    docClient.query(params, function(err, data) {
        if (err) {
            callback(err);
        }
        else {
            if (typeof callbackFn === 'function') {
                callbackFn(data);
            }
        }
    });
}


exports.handler = (event, context, callback) => {
    let checkEmptyFields = true;
    for (const field in event) {
        if (typeof event[field] == 'string') {
            if (event[field].trim().length == 0) {
                checkEmptyFields = false;
            }
        }
    }
    if (checkEmptyFields) {
        let checkIfOrganizationExists = {
            TableName: 'dev_KPRO_organizations',
            KeyConditionExpression: '#organization_id = :organization_id',
            ExpressionAttributeNames: { '#organization_id': 'organization_id' },
            ExpressionAttributeValues: { ':organization_id': event.organization_id },
        };
        queryDynamo(checkIfOrganizationExists, callback, function(organization) {
            if (organization.Count > 0) {
                let checkIfAssetExistsParams = {
                    TableName: 'dev_KPRO_Assests',
                    KeyConditionExpression: '#asset_id = :asset_id',
                    ExpressionAttributeNames: { '#asset_id': 'asset_id' },
                    ExpressionAttributeValues: { ':asset_id': event.asset_id },
                };
                queryDynamo(checkIfAssetExistsParams, callback, function(asset) {
                    if (asset.Count > 0) {
                        let op_response = [];
                        let summary_response = [];
                        let step_response = [];
                        let daily_log_response = {};
                        //OP PARAMS
                        let master_promise_array = [];
                        master_promise_array.push(new Promise((m_res, m_rej) => {
                            let getAllOperationalParametersParams = {
                                TableName: "dev_KPRO_organization_tags",
                                IndexName: 'organization_id__dashboard_id-asset_id-index',
                                KeyConditionExpression: 'organization_id__dashboard_id = :organization_id__dashboard_id AND asset_id = :asset_id',
                                FilterExpression: "tag_type = :tag_type OR tag_type = :2ndtag_type",
                                ExpressionAttributeValues: {
                                    ':organization_id__dashboard_id': event.organization_id + "__" + event.dashboard_id,
                                    ':asset_id': event.asset_id,
                                    ':tag_type': "AI",
                                    ':2ndtag_type': 'AO'
                                }
                            };
                            queryDynamo(getAllOperationalParametersParams, callback, function(operational_parameters) {
                                // console.log("operational_parameters", operational_parameters)
                                if (operational_parameters.Count > 0) {
                                    operational_parameters.Items = operational_parameters.Items.map(item => {
                                        item.type = "OPERATIONAL_PARAMETER";
                                        return item;
                                    });
                                    let internal_promise_array = [];
                                    for (let i = 0; i < operational_parameters.Items.length; i++) {
                                        internal_promise_array.push(new Promise((res, rej) => {
                                            let letGetLatestRecord = {
                                                TableName: "dev_kpro_chainhome_master",
                                                KeyConditionExpression: 'kpch_tag = :kpch_tag',
                                                ExpressionAttributeValues: {
                                                    ':kpch_tag': organization.Items[0].organization_code + asset.Items[0].asset_type + "_" + operational_parameters.Items[i].tag_id
                                                },
                                                ScanIndexForward: false,
                                                Limit: 1
                                            };
                                            queryDynamo(letGetLatestRecord, callback, function(latestRecord) {
                                                // console.log("latestRecord", latestRecord);
                                                res(latestRecord);
                                                operational_parameters.Items[i].actual_value = latestRecord.Count > 0 ? latestRecord.Items[0].kpch_val.toFixed(2) : "0.00";
                                            });
                                        }));
                                    }
                                    Promise.all(internal_promise_array).then((data) => {
                                        op_response = operational_parameters.Items;
                                        m_res(operational_parameters);
                                    });
                                }
                                else {
                                    m_res(operational_parameters);
                                }
                            });
                        }));
                        //SUMMARY PARAMETERS
                        master_promise_array.push(new Promise((m_res, m_rej) => {
                            let getAllSummaryParametersParams = {
                                TableName: "dev_KPRO_organization_tags",
                                IndexName: 'organization_id__dashboard_id-asset_id-index',
                                KeyConditionExpression: 'organization_id__dashboard_id = :organization_id__dashboard_id AND asset_id = :asset_id',
                                FilterExpression: "tag_type <> :tag_type",
                                ExpressionAttributeValues: {
                                    ':organization_id__dashboard_id': event.organization_id + "__" + event.dashboard_id,
                                    ':asset_id': event.asset_id,
                                    ':tag_type': "AI"
                                }
                            };
                            queryDynamo(getAllSummaryParametersParams, callback, function(summary_parameters) {
                                let internal_promise_array = [];
                                for (let i = 0; i < summary_parameters.Items.length; i++) {
                                    internal_promise_array.push(new Promise((res, rej) => {
                                        let tag = summary_parameters.Items[i];
                                        let getMasterTagDetailsParams = {
                                            TableName: 'dev_KPRO_MasterParameters',
                                            KeyConditionExpression: 'tag_id = :tag_id',
                                            ExpressionAttributeValues: {
                                                ':tag_id': summary_parameters.Items[i].tag_id
                                            }
                                        };
                                        queryDynamo(getMasterTagDetailsParams, callback, function(master_tag) {
                                            if (tag.tag_type == "DI" || tag.tag_type == "DO") {
                                                if (master_tag.Count > 0) {
                                                    if (master_tag.Items[0].parameter_values) {
                                                        let letGetLatestRecord = {
                                                            TableName: "dev_kpro_chainhome_master",
                                                            KeyConditionExpression: 'kpch_tag = :kpch_tag',
                                                            ExpressionAttributeValues: {
                                                                ':kpch_tag': organization.Items[0].organization_code + asset.Items[0].asset_type + "_" + summary_parameters.Items[i].tag_id
                                                            },
                                                            ScanIndexForward: false,
                                                            Limit: 1
                                                        };
                                                        queryDynamo(letGetLatestRecord, callback, function(latestRecord) {
                                                            let waiting_promise = []
                                                            if (latestRecord.Count == 0) {
                                                                waiting_promise.push(new Promise((w_res, w_rej) => {
                                                                    let letGetLatestRecord = {
                                                                        TableName: "dev_kpro_chainhome_alarms",
                                                                        KeyConditionExpression: 'kpch_tag = :kpch_tag',
                                                                        ExpressionAttributeValues: {
                                                                            ':kpch_tag': organization.Items[0].organization_code + asset.Items[0].asset_type + "_" + summary_parameters.Items[i].tag_id
                                                                        },
                                                                        ScanIndexForward: false,
                                                                        Limit: 1
                                                                    };
                                                                    queryDynamo(letGetLatestRecord, callback, function(data) {
                                                                        latestRecord = data;
                                                                        w_res("latestRecord " + latestRecord + " return successfully")
                                                                    });
                                                                }))
                                                            }
                                                            Promise.all(waiting_promise).then((data) => {
                                                                if (latestRecord.Count > 0) {
                                                                    let sub_promise_array = []
                                                                    let parameter_response = master_tag.Items[0].parameter_values.filter(item => item.tag_value == latestRecord.Items[0].kpch_val);
                                                                    if (parameter_response.length > 0) {
                                                                        if (parameter_response[0].is_conditional != undefined && parameter_response[0].is_conditional == true) {
                                                                            sub_promise_array.push(new Promise((s_res, s_rej) => {
                                                                                let getLastValueOfDependentTagParams = {
                                                                                    TableName: 'dev_kpro_chainhome_master',
                                                                                    KeyConditionExpression: 'kpch_tag = :kpch_tag',
                                                                                    ExpressionAttributeValues: {
                                                                                        ':kpch_tag': latestRecord.Items[0].kpch_tag.split("_")[0] + "_" + parameter_response[0].dependent_tag_id
                                                                                    },
                                                                                    ScanIndexForward: false,
                                                                                    Limit: 1
                                                                                };
                                                                                queryDynamo(getLastValueOfDependentTagParams, callback, function(param_value) {
                                                                                    if (param_value.Count > 0) {
                                                                                        if (param_value.Items[0].kpch_val == parameter_response[0].dependent_tag_value) {
                                                                                            summary_parameters.Items[i].color = parameter_response[0].dependent_color;
                                                                                            summary_response.push(summary_parameters.Items[i]);
                                                                                        }
                                                                                        else {
                                                                                            summary_parameters.Items[i].color = parameter_response[0].tag_color;
                                                                                            summary_response.push(summary_parameters.Items[i]);
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        summary_parameters.Items[i].color = parameter_response[0].tag_color;
                                                                                        summary_response.push(summary_parameters.Items[i]);
                                                                                    }
                                                                                    s_res("param_value " + param_value + " return Successfully")
                                                                                });
                                                                            }));
                                                                        }
                                                                        else {
                                                                            summary_parameters.Items[i].color = parameter_response[0].tag_color;
                                                                            summary_response.push(summary_parameters.Items[i]);
                                                                        }
                                                                    }
                                                                    else {
                                                                        res(master_tag)
                                                                        console.log("INVALID VALUE");
                                                                    }
                                                                    Promise.all(sub_promise_array).then((data) => {
                                                                        res(master_tag)
                                                                    });
                                                                }
                                                                else {
                                                                    res(master_tag)
                                                                    console.log(("iam here"));
                                                                }
                                                            })
                                                        });
                                                    }
                                                    else {
                                                        res(master_tag)
                                                        console.log("INVALID CONFGURATION");
                                                    }
                                                }
                                                else {
                                                    console.log("INVALID TAG");
                                                    res(master_tag)
                                                }
                                            }
                                            else {
                                                res(master_tag)
                                            }
                                        });
                                    }));
                                }
                                Promise.all(internal_promise_array).then((data) => {
                                    m_res(data);
                                    // callback(null,{ status: "SUCCESS", status_message: "step_data return Successfully" })
                                });

                            });
                        }));
                        //STEP DATA
                        master_promise_array.push(new Promise((m_res, m_rej) => {
                            let getAllPlantsOfOrganizationParams = {
                                TableName: "dev_KPRO_plants",
                                IndexName: "organization_id-internal_plant_name-index",
                                KeyConditionExpression: 'organization_id = :organization_id',
                                FilterExpression: "asset_id = :asset_id",
                                ExpressionAttributeValues: {
                                    ':organization_id': event.organization_id,
                                    ':asset_id': event.asset_id
                                }
                            };
                            queryDynamo(getAllPlantsOfOrganizationParams, callback, function(plants) {
                                console.log("plants", plants)
                                let plants_promise_array = [];
                                for (let i = 0; i < plants.Items.length; i++) {
                                    plants_promise_array.push(new Promise((p_res, p_rej) => {
                                        let letGetLatestRecord = {
                                            TableName: "dev_kpro_chainhome_master",
                                            KeyConditionExpression: 'kpch_tag = :kpch_tag',
                                            ExpressionAttributeValues: {
                                                ':kpch_tag': organization.Items[0].organization_code + asset.Items[0].asset_type + "_" + plants.Items[i].plant_tag_id
                                            },
                                            ScanIndexForward: false,
                                            Limit: 1
                                        };
                                        queryDynamo(letGetLatestRecord, callback, function(latestRecord) {
                                            if (latestRecord.Count > 0) {
                                                plants.Items[i].plant_steps.map(step => {
                                                    if (step.step_tag_value == latestRecord.Items[0].kpch_val) {
                                                        step_response.push({
                                                            ...plants.Items[i],
                                                            step_name: step.step_name,
                                                            actual_value: latestRecord.Items[0].kpch_val.toFixed(2),
                                                            color: step.step_name.includes("Idle") ? "RED" : "GREEN",
                                                            type: "STEP"
                                                        });
                                                        console.log("step_response", step_response);
                                                    }
                                                });
                                                p_res(latestRecord);
                                            }
                                            else {
                                                p_res(latestRecord);
                                            }
                                        });
                                    }));
                                }
                                Promise.all(plants_promise_array).then((data) => {
                                    m_res(data);
                                    // callback(null,{ status: "SUCCESS", status_message: "step_data return Successfully" })
                                });
                            });
                        }));
                        //DAILY LOGS
                        master_promise_array.push(new Promise((m_res, m_rej) => {
                            let getTodaysLogParams = {
                                TableName: "dev_KPRO_Daily_log",
                                KeyConditionExpression: '#organization_id__asset_id = :organization_id__asset_id AND #log_date = :log_date',
                                ExpressionAttributeNames: {
                                    '#organization_id__asset_id': 'organization_id__asset_id',
                                    '#log_date': 'log_date'
                                },
                                ExpressionAttributeValues: {
                                    ':organization_id__asset_id': event.organization_id + "__" + event.asset_id,
                                    ':log_date': new Date().toISOString().split('T')[0]
                                }
                            };
                            queryDynamo(getTodaysLogParams, callback, function(latestRecord) {
                                let getAllPlantsOfOrganizationParams = {
                                    TableName: "dev_KPRO_plants",
                                    IndexName: "organization_id-internal_plant_name-index",
                                    KeyConditionExpression: 'organization_id = :organization_id',
                                    FilterExpression: "asset_id = :asset_id",
                                    ExpressionAttributeValues: {
                                        ':organization_id': event.organization_id,
                                        ':asset_id': event.asset_id
                                    }
                                };
                                queryDynamo(getAllPlantsOfOrganizationParams, callback, function(plants) {
                                    for (let i = 0; i < plants.Items.length; i++) {
                                        let parameter = plants.Items[i].plant_name.toLowerCase();
                                        if (latestRecord.Count > 0) {
                                            daily_log_response[plants.Items[i].plant_name] = latestRecord.Items[0][plants.Items[i].plant_name.split(" ").join("").toUpperCase()] || [];
                                            daily_log_response[parameter + "_water_produced"] = Math.round(latestRecord.Items[0][parameter + "_water_produced"] * 100) / 100 || 0;
                                            //console.log(`latestRecord.Items[0][${parameter} + "__recovery_percentage"]`, latestRecord.Items[0][parameter + "__recovery_percentage"]);
                                            if (latestRecord.Items[0][parameter + "_recovery_percentage"] != undefined) {
                                                step_response.push({
                                                    ...plants.Items[i],
                                                    plant_name: plants.Items[i].plant_name,
                                                    actual_value: latestRecord.Items[0][parameter + "_recovery_percentage"],
                                                    type: "RECOVERY"
                                                });
                                            }
                                            let sum_value = 0;
                                            if (daily_log_response[plants.Items[i].plant_name].length > 0) {
                                                for (let j = 0; j < daily_log_response[plants.Items[i].plant_name].length; j++) {
                                                    let singleObject = daily_log_response[plants.Items[i].plant_name][j];
                                                    if (singleObject.stop != undefined) {
                                                        sum_value = sum_value + (new Date(singleObject.stop * 1000).getTime() - new Date(singleObject.start * 1000).getTime());
                                                    }
                                                    if (singleObject.stop == undefined) {
                                                        sum_value = sum_value + (new Date().getTime() - new Date(singleObject.start * 1000).getTime());
                                                    }
                                                }
                                                sum_value = sum_value / 1000;
                                                daily_log_response[`${plants.Items[i].plant_name.toLowerCase()}_total_hours_of_operation`] = sum_value;
                                            }
                                            else {
                                                daily_log_response[`${plants.Items[i].plant_name.toLowerCase()}_total_hours_of_operation`] = sum_value;
                                            }

                                        }
                                        else {
                                            daily_log_response[plants.Items[i].plant_name] = [];
                                            daily_log_response[parameter + "_water_produced"] = 0;
                                            daily_log_response[plants.Items[i].plant_name + "_total_hours_of_operation"] = 0;
                                        }
                                        delete latestRecord.Items[0][plants.Items[i].plant_name.split(" ").join("").toUpperCase()];
                                    }
                                    daily_log_response.type = "DAILY_LOGS";
                                    daily_log_response = {
                                        ...latestRecord.Items[0],
                                        ...daily_log_response
                                    };
                                    daily_log_response = [daily_log_response];
                                    m_res(daily_log_response);
                                });
                            });
                        }));
                        //HEART BEAT
                        master_promise_array.push(new Promise((m_res, m_rej) => {
                            let getLastHeartBeatDetails = {
                                TableName: 'dev_kpro_chainhome_master',
                                KeyConditionExpression: 'kpch_tag = :kpch_tag',
                                ExpressionAttributeValues: {
                                    ':kpch_tag': organization.Items[0].organization_code + asset.Items[0].asset_type + "_heartbeat"
                                },
                                ScanIndexForward: false,
                                Limit: 2
                            };
                            queryDynamo(getLastHeartBeatDetails, callback, function(heartbeat_data) {
                                let getTimeDurationOfHeartBeatForAnOrganization = {
                                    TableName: 'dev_KPRO_MasterSettings',
                                    KeyConditionExpression: 'organization_id = :organization_id AND master_type = :master_type',
                                    ExpressionAttributeValues: {
                                        ':organization_id': organization.Items[0].organization_id,
                                        ':master_type': 'HEART_BEAT'
                                    }
                                };
                                queryDynamo(getTimeDurationOfHeartBeatForAnOrganization, callback, function(heartbeat_settings) {
                                    let heartBeat_response = {
                                        organization_id: organization.Items[0].organization_id,
                                        asset_id: asset.Items[0].asset_id,
                                        color: "GREEN",
                                        type: "HEARTBEAT"
                                    };
                                    if (heartbeat_settings.Count > 0 && heartbeat_data.Items[1].kpch_tist - heartbeat_data.Items[0].kpch_tist > 10) {
                                        let difference = heartbeat_data.Items[1].kpch_tist - heartbeat_data.Items[0].kpch_tist;
                                        if (difference > heartbeat_settings.Items[0].Minimum_Minutes && difference < heartbeat_settings.Items[0].Maximum_Minutes) {
                                            heartBeat_response.color = "YELLOW";
                                        }
                                        else if (difference > heartbeat_settings.Items[0].Maximum_Minutes) {
                                            heartBeat_response.color = "RED";
                                        }
                                    }
                                    step_response.push(heartBeat_response);
                                    m_res(heartBeat_response);
                                });
                            });
                        }));
                        Promise.all(master_promise_array).then((data) => {
                            let response = { items: op_response.concat(summary_response, step_response, daily_log_response) };
                            callback(null, { status: "SUCCESS", data: response });
                        });
                    }
                    else {
                        callback(new Error("Asset With ID: " + event.asset_id + " Not Found"));
                    }
                });
            }
            else {
                callback(new Error("Organization With ID: " + event.organization_id + " Not Found"));

            }
        });
    }
    else {
        callback(new Error("Empty Fields Occured Cannot List Tags"));
    }
};
